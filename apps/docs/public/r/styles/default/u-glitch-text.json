{
  "name": "u-glitch-text",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/glitch-text/page.tsx",
      "content": "\"use client\";\r\n\r\nimport { Player } from \"@remotion/player\";\r\n\r\nimport GlitchText from \"@/registry/default/components/glitch-text\"; // Adjust path as necessary\r\n\r\nexport default function GlitchTextDemo() {\r\n  const glitchTextProps = {\r\n    text: \"Glitch!\",\r\n    textColor: \"white\", // Default is now var(--glitch-effect-white)\r\n    glitchTextColor1: \"var(--glitch-color-2)\", // Default is now var(--glitch-cyan)\r\n    glitchTextColor2: \"var(--glitch-color-1)\", // Default is now var(--glitch-magenta)\r\n    fontSize: \"3rem\",\r\n    glitchStrength: 15, // Adjusted for sporadic effect\r\n    glitchSpeed: 2, // Affects frequency of new random values during a glitch\r\n    sporadicGlitchChance: 0.5, // e.g., 10% chance of glitching per frame\r\n  };\r\n\r\n  return (\r\n    <Player\r\n      component={GlitchText}\r\n      inputProps={glitchTextProps}\r\n      durationInFrames={120} // Total duration of the player timeline (e.g., 4 seconds at 30fps)\r\n      compositionWidth={480}\r\n      compositionHeight={270} // 16:9 aspect ratio\r\n      fps={30}\r\n      autoPlay\r\n      controls // Show player controls\r\n      loop // Loop the animation\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/glitch-text.tsx",
      "content": "\"use client\";\n\nimport { useCurrentFrame } from \"remotion\";\n\ninterface GlitchTextProps {\n  text?: string;\n  textColor?: string;\n  glitchTextColor1?: string;\n  glitchTextColor2?: string;\n  glitchTextColor3?: string;\n  fontSize?: string;\n  fontFamily?: string;\n  fontWeight?: string;\n  glitchStrength?: number;\n  glitchSpeed?: number;\n  sporadicGlitchChance?: number;\n}\n\nexport default function GlitchText({\n  text = \"GLITCH\",\n  textColor = \"white\", // Using new CSS variable\n  glitchTextColor1 = \"var(--glitch-color-1)\", // Using new CSS variable\n  glitchTextColor2 = \"var(--glitch-color-2)\", // Using new CSS variable\n  fontSize = \"5rem\",\n  fontFamily = \"monospace\",\n  fontWeight = \"bold\",\n  glitchStrength = 10,\n  glitchSpeed = 5,\n  sporadicGlitchChance,\n}: GlitchTextProps) {\n  const frame = useCurrentFrame();\n\n  let currentGlitchIntensity = 0;\n  let currentRgbOffset = 0;\n\n  if (sporadicGlitchChance !== undefined && sporadicGlitchChance > 0) {\n    // Sporadic glitch logic\n    if (Math.random() < sporadicGlitchChance) {\n      // Glitch happens based on chance\n      // Use glitchSpeed to determine how often a *new* random glitch can occur,\n      // rather than how fast a continuous sine wave moves.\n      // For example, a higher glitchSpeed could mean we only pick new random values less often.\n      // This interpretation might need refinement based on desired effect.\n      // For now, let's make it so that a glitch, when it occurs, has a random intensity.\n      if (\n        frame % Math.max(1, Math.floor(glitchSpeed)) === 0 ||\n        glitchSpeed < 1\n      ) {\n        currentGlitchIntensity = (Math.random() - 0.5) * 2 * glitchStrength; // Random value between -glitchStrength and +glitchStrength\n        currentRgbOffset = (Math.random() - 0.5) * 2 * (glitchStrength / 1.5); // Slightly less offset for RGB\n      }\n    }\n    // Else, no glitch on this frame for sporadic mode\n  } else {\n    // Original continuous glitch logic\n    currentGlitchIntensity = Math.sin(frame / glitchSpeed) * glitchStrength;\n    currentRgbOffset =\n      Math.sin(frame / (glitchSpeed / 2)) * (glitchStrength / 2);\n  }\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        fontSize,\n        fontWeight,\n        fontFamily,\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          color: glitchTextColor1,\n          transform: `translate(${currentRgbOffset}px, ${currentGlitchIntensity}px)`,\n          mixBlendMode: \"screen\", // Consider if 'screen' is desired for B&W\n          opacity: 0.6, // Added opacity for better layering\n        }}\n      >\n        {text}\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          color: glitchTextColor2,\n          transform: `translate(${-currentRgbOffset}px, ${-currentGlitchIntensity}px)`,\n          mixBlendMode: \"screen\", // Consider if 'screen' is desired for B&W\n          opacity: 0.6, // Added opacity for better layering\n        }}\n      >\n        {text}\n      </div>\n      <div style={{ color: textColor, opacity: 0.8 }}>{text}</div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}