{
  "name": "circular-loader",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/circular-loader.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { interpolate, spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface CircularLoaderProps {\n  loadingText?: string;\n  circleColor?: string;\n  textColor?: string;\n  size?: number;\n  strokeWidth?: number;\n  trackColor?: string;\n  containerStyle?: React.CSSProperties;\n  hideText?: boolean;\n  speed?: number;\n}\n\nexport default function CircularLoader({\n  loadingText = \"Loading...\",\n  circleColor = \"var(--foreground)\",\n  textColor = \"var(--foreground)\",\n  size = 100,\n  strokeWidth: propStrokeWidth,\n  trackColor = \"var(--muted)\",\n  containerStyle,\n  hideText = false,\n  speed = 1,\n}: CircularLoaderProps) {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const strokeWidth =\n    propStrokeWidth !== undefined ? propStrokeWidth : Math.max(2, size / 10);\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  // Animation for the spinning arc\n  const rotation = interpolate(frame * speed, [0, fps / speed], [0, 360], {\n    extrapolateRight: \"clamp\",\n  });\n\n  // Spring animation for the dash offset to create a \"breathing\" or \"pulsing\" effect\n  const progress = spring({\n    frame: frame % (fps / speed), // Loop the animation\n    fps,\n    config: {\n      damping: 10,\n      stiffness: 50,\n      mass: 0.5,\n    },\n    durationInFrames: fps / speed,\n  });\n\n  const strokeDashoffset = interpolate(\n    progress,\n    [0, 1],\n    [circumference * 0.75, circumference * 0.1]\n  );\n\n  const containerStyles: React.CSSProperties = {\n    width: size,\n    height: size,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"relative\",\n    overflow: \"visible\", // Allow stroke to be visible outside the initial box\n    backgroundColor: \"transparent\",\n    ...containerStyle,\n  };\n\n  const svgStyles: React.CSSProperties = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    transform: `rotate(${rotation}deg)`,\n    transformOrigin: \"center center\",\n  };\n\n  const textStyles: React.CSSProperties = {\n    color: textColor,\n    fontSize: Math.max(10, size / 6), // Responsive font size\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    position: \"relative\",\n    zIndex: 1, // Ensure text is above the SVG\n    lineHeight: 1.2,\n  };\n\n  return (\n    <div style={containerStyles}>\n      {!hideText && <div style={textStyles}>{loadingText}</div>}\n      <svg style={svgStyles} viewBox={`0 0 ${size} ${size}`}>\n        {/* Track Circle */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke={trackColor}\n          strokeWidth={strokeWidth}\n        />\n        {/* Progress Arc */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke={circleColor}\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n        />\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}