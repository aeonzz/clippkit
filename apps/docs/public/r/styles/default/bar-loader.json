{
  "name": "bar-loader",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/bar-loader.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface BarLoaderProps {\n  loadingText?: string;\n  barColor?: string;\n  textColor?: string;\n  height?: string | number;\n  width?: string | number;\n  containerStyle?: React.CSSProperties;\n}\n\nexport default function BarLoader({\n  loadingText = \"Loading...\",\n  barColor = \"var(--foreground)\",\n  textColor = \"var(--foreground)\",\n  height: propHeight,\n  width: propWidth,\n  containerStyle,\n}: BarLoaderProps) {\n  const frame = useCurrentFrame();\n  const {\n    durationInFrames,\n    width: videoWidth,\n    height: videoHeight,\n  } = useVideoConfig();\n\n  let computedWidth: number;\n  if (typeof propWidth === \"number\") {\n    computedWidth = propWidth;\n  } else if (typeof propWidth === \"string\" && propWidth.endsWith(\"%\")) {\n    const percentage = parseFloat(propWidth.substring(0, propWidth.length - 1));\n    computedWidth = !isNaN(percentage)\n      ? (percentage / 100) * videoWidth\n      : videoWidth;\n  } else {\n    computedWidth = videoWidth;\n  }\n\n  let computedHeight: number;\n  if (typeof propHeight === \"number\") {\n    computedHeight = propHeight;\n  } else if (typeof propHeight === \"string\" && propHeight.endsWith(\"%\")) {\n    const percentage = parseFloat(\n      propHeight.substring(0, propHeight.length - 1)\n    );\n    computedHeight = !isNaN(percentage)\n      ? (percentage / 100) * videoHeight\n      : videoHeight / 4; // Default to 1/4th of video height if not specified\n  } else {\n    computedHeight = videoHeight / 4; // Default to 1/4th of video height\n  }\n\n  const finalWidth = computedWidth;\n  const finalHeight = computedHeight;\n  const barHeight = Math.max(8, finalHeight / 4); // Ensure bar is at least 8px or 1/4 of component height\n  const textHeight = finalHeight - barHeight;\n\n  const progress = frame / durationInFrames;\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        ...containerStyle,\n      }}\n    >\n      <div\n        style={{\n          height: textHeight,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          color: textColor,\n          fontSize: Math.max(16, textHeight / 2), // Responsive font size\n          fontWeight: \"bold\",\n        }}\n      >\n        {loadingText}\n      </div>\n      <div\n        style={{\n          width: \"80%\", // Bar container width\n          height: barHeight,\n          backgroundColor: \"var(--muted)\", // Background of the bar track\n          borderRadius: barHeight / 2,\n          overflow: \"hidden\",\n          marginTop: barHeight / 2,\n        }}\n      >\n        <div\n          style={{\n            width: `${progress * 100}%`,\n            height: \"100%\",\n            backgroundColor: barColor,\n            borderRadius: barHeight / 2,\n            transition: \"width 0.1s linear\",\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}