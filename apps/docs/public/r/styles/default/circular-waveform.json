{
  "name": "circular-waveform",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/circular-waveform.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { random, useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface CircularWaveformProps {\n  barCount?: number;\n  barWidth?: number;\n  barColor?: string;\n  waveAmplitude?: number;\n  waveSpeed?: number;\n  randomness?: number;\n  radius?: number;\n  centerOffset?: { x?: number; y?: number };\n  containerStyle?: React.CSSProperties;\n  barStyle?: React.CSSProperties;\n  height?: string | number;\n  width?: string | number;\n}\n\nexport default function CircularWaveform({\n  barCount = 60,\n  barWidth = 5,\n  barColor = \"var(--foreground)\",\n  waveAmplitude = 50,\n  waveSpeed = 10,\n  randomness = 30,\n  radius = 100,\n  centerOffset = { x: 0, y: 0 },\n  containerStyle,\n  barStyle,\n  height: propHeight,\n  width: propWidth,\n}: CircularWaveformProps) {\n  const frame = useCurrentFrame();\n  const { width: videoWidth, height: videoHeight } = useVideoConfig();\n\n  const finalWidth = propWidth ?? videoWidth;\n  const finalHeight = propHeight ?? videoHeight;\n\n  const centerX =\n    (typeof finalWidth === \"number\"\n      ? finalWidth / 2\n      : parseFloat(String(finalWidth).replace(\"px\", \"\")) / 2) +\n    (centerOffset.x ?? 0);\n  const centerY =\n    (typeof finalHeight === \"number\"\n      ? finalHeight / 2\n      : parseFloat(String(finalHeight).replace(\"px\", \"\")) / 2) +\n    (centerOffset.y ?? 0);\n\n  const bars = Array.from({ length: barCount }).map((_, i) => {\n    const seed = i * 1000;\n    const angle = (i / barCount) * 2 * Math.PI;\n    const dynamicHeight = Math.max(\n      5,\n      Math.abs(Math.sin(frame / waveSpeed + i / (barCount / (2 * Math.PI)))) *\n        waveAmplitude +\n        random(seed) * randomness\n    );\n\n    const x1 = centerX + radius * Math.cos(angle);\n    const y1 = centerY + radius * Math.sin(angle);\n    const x2 = centerX + (radius + dynamicHeight) * Math.cos(angle);\n    const y2 = centerY + (radius + dynamicHeight) * Math.sin(angle);\n\n    return {\n      x1,\n      y1,\n      x2,\n      y2,\n      height: dynamicHeight, // Not directly used for line, but for potential bar representation\n    };\n  });\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        position: \"relative\", // Needed for absolute positioning of bars if we switch to div bars\n        ...containerStyle,\n      }}\n    >\n      <svg width=\"100%\" height=\"100%\" style={{ overflow: \"visible\" }}>\n        {bars.map((bar, i) => (\n          <line\n            key={i}\n            x1={bar.x1}\n            y1={bar.y1}\n            x2={bar.x2}\n            y2={bar.y2}\n            stroke={barColor}\n            strokeWidth={barWidth}\n            style={{\n              transition: \"all 0.05s ease-out\",\n              ...barStyle, // Note: some CSS properties might not apply to SVG elements directly\n            }}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}