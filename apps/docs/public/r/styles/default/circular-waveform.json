{
  "name": "circular-waveform",
  "type": "registry:component",
  "dependencies": [
    "remotion",
    "@remotion/media-utils"
  ],
  "files": [
    {
      "path": "components/circular-waveform.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport {\r\n  MediaUtilsAudioData,\r\n  visualizeAudioWaveform,\r\n} from \"@remotion/media-utils\";\r\nimport { random, useCurrentFrame, useVideoConfig } from \"remotion\";\r\n\r\ninterface CircularWaveformProps {\r\n  audioData?: MediaUtilsAudioData | null;\r\n  barCount?: number;\r\n  barWidth?: number;\r\n  barColor?: string;\r\n  waveAmplitude?: number;\r\n  radius?: number;\r\n  centerOffset?: { x?: number; y?: number };\r\n  containerStyle?: React.CSSProperties;\r\n  barStyle?: React.CSSProperties;\r\n  height?: string | number;\r\n  width?: string | number;\r\n  barMinHeight?: number;\r\n  strokeLinecap?: \"butt\" | \"round\" | \"square\";\r\n  transitionDuration?: string;\r\n  transitionTimingFunction?: string;\r\n  rotationOffset?: number;\r\n  growOutwardsOnly?: boolean;\r\n}\r\n\r\nexport default function CircularWaveform({\r\n  audioData,\r\n  barCount = 60,\r\n  barWidth = 5,\r\n  barColor = \"var(--foreground)\",\r\n  waveAmplitude = 50,\r\n  radius = 100,\r\n  centerOffset = { x: 0, y: 0 },\r\n  containerStyle,\r\n  barStyle,\r\n  height: propHeight,\r\n  width: propWidth,\r\n  barMinHeight = 5,\r\n  strokeLinecap = \"butt\",\r\n  transitionDuration = \"0.05s\",\r\n  transitionTimingFunction = \"ease-out\",\r\n  rotationOffset = 0,\r\n  growOutwardsOnly = false,\r\n}: CircularWaveformProps) {\r\n  const frame = useCurrentFrame();\r\n  const { width: videoWidth, height: videoHeight, fps } = useVideoConfig();\r\n\r\n  const finalWidth = propWidth ?? videoWidth;\r\n  const finalHeight = propHeight ?? videoHeight;\r\n\r\n  const centerX =\r\n    (typeof finalWidth === \"number\"\r\n      ? finalWidth / 2\r\n      : parseFloat(String(finalWidth).replace(\"px\", \"\")) / 2) +\r\n    (centerOffset.x ?? 0);\r\n  const centerY =\r\n    (typeof finalHeight === \"number\"\r\n      ? finalHeight / 2\r\n      : parseFloat(String(finalHeight).replace(\"px\", \"\")) / 2) +\r\n    (centerOffset.y ?? 0);\r\n\r\n  const waveformSamples = audioData\r\n    ? visualizeAudioWaveform({\r\n        fps,\r\n        frame,\r\n        audioData,\r\n        numberOfSamples: barCount,\r\n        windowInSeconds: 1 / fps,\r\n      })\r\n    : Array(barCount)\r\n        .fill(0)\r\n        .map((_, i) => {\r\n          const seed = i * 1000;\r\n          return (\r\n            Math.max(\r\n              0.1,\r\n              Math.abs(Math.sin(frame / 10 + i / (barCount / (2 * Math.PI)))) +\r\n                random(seed) * 0.3\r\n            ) *\r\n              0.5 +\r\n            0.25\r\n          );\r\n        });\r\n\r\n  const bars = waveformSamples.map((sample, i) => {\r\n    const angleRad =\r\n      (i / barCount) * 2 * Math.PI + (rotationOffset * Math.PI) / 180;\r\n    const dynamicHeight = Math.max(barMinHeight, sample * waveAmplitude);\r\n\r\n    let startRadius: number;\r\n    let endRadius: number;\r\n\r\n    if (growOutwardsOnly) {\r\n      startRadius = radius;\r\n      endRadius = radius + dynamicHeight;\r\n    } else {\r\n      startRadius = radius - dynamicHeight / 2;\r\n      endRadius = radius + dynamicHeight / 2;\r\n    }\r\n\r\n    if (startRadius < 0) {\r\n      endRadius += Math.abs(startRadius);\r\n      startRadius = 0;\r\n    }\r\n\r\n    const maxAllowedRadius = Math.min(centerX, centerY);\r\n    if (endRadius > maxAllowedRadius) {\r\n      endRadius = maxAllowedRadius;\r\n    }\r\n    if (startRadius > endRadius) {\r\n      startRadius = endRadius - barMinHeight > 0 ? endRadius - barMinHeight : 0;\r\n    }\r\n\r\n    const finalX1 = centerX + startRadius * Math.cos(angleRad);\r\n    const finalY1 = centerY + startRadius * Math.sin(angleRad);\r\n    const finalX2 = centerX + endRadius * Math.cos(angleRad);\r\n    const finalY2 = centerY + endRadius * Math.sin(angleRad);\r\n\r\n    return {\r\n      x1: finalX1,\r\n      y1: finalY1,\r\n      x2: finalX2,\r\n      y2: finalY2,\r\n      height: endRadius - startRadius,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: finalWidth,\r\n        height: finalHeight,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: \"transparent\",\r\n        position: \"relative\",\r\n        ...containerStyle,\r\n      }}\r\n    >\r\n      <svg width=\"100%\" height=\"100%\" style={{ overflow: \"visible\" }}>\r\n        {bars.map((bar, i) => (\r\n          <line\r\n            key={i}\r\n            x1={bar.x1}\r\n            y1={bar.y1}\r\n            x2={bar.x2}\r\n            y2={bar.y2}\r\n            stroke={barColor}\r\n            strokeWidth={barWidth}\r\n            strokeLinecap={strokeLinecap}\r\n            style={{\r\n              transitionProperty: \"all\",\r\n              transitionDuration: transitionDuration,\r\n              transitionTimingFunction: transitionTimingFunction,\r\n              ...barStyle,\r\n            }}\r\n          />\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}