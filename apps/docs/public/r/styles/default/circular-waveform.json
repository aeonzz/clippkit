{
  "name": "circular-waveform",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/circular-waveform.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  MediaUtilsAudioData,\n  visualizeAudioWaveform,\n} from \"@remotion/media-utils\";\nimport { random, useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface CircularWaveformProps {\n  audioData?: MediaUtilsAudioData | null;\n  barCount?: number;\n  barWidth?: number;\n  barColor?: string;\n  waveAmplitude?: number;\n  radius?: number;\n  centerOffset?: { x?: number; y?: number };\n  containerStyle?: React.CSSProperties;\n  barStyle?: React.CSSProperties;\n  height?: string | number;\n  width?: string | number;\n  barMinHeight?: number;\n  strokeLinecap?: \"butt\" | \"round\" | \"square\";\n  transitionDuration?: string;\n  transitionTimingFunction?: string;\n  rotationOffset?: number;\n}\n\nexport default function CircularWaveform({\n  audioData,\n  barCount = 60,\n  barWidth = 5,\n  barColor = \"var(--foreground)\",\n  waveAmplitude = 50,\n  radius = 100,\n  centerOffset = { x: 0, y: 0 },\n  containerStyle,\n  barStyle,\n  height: propHeight,\n  width: propWidth,\n  barMinHeight = 5,\n  strokeLinecap = \"butt\",\n  transitionDuration = \"0.05s\",\n  transitionTimingFunction = \"ease-out\",\n  rotationOffset = 0,\n}: CircularWaveformProps) {\n  const frame = useCurrentFrame();\n  const { width: videoWidth, height: videoHeight, fps } = useVideoConfig();\n\n  const finalWidth = propWidth ?? videoWidth;\n  const finalHeight = propHeight ?? videoHeight;\n\n  const centerX =\n    (typeof finalWidth === \"number\"\n      ? finalWidth / 2\n      : parseFloat(String(finalWidth).replace(\"px\", \"\")) / 2) +\n    (centerOffset.x ?? 0);\n  const centerY =\n    (typeof finalHeight === \"number\"\n      ? finalHeight / 2\n      : parseFloat(String(finalHeight).replace(\"px\", \"\")) / 2) +\n    (centerOffset.y ?? 0);\n\n  const waveformSamples = audioData\n    ? visualizeAudioWaveform({\n        fps,\n        frame,\n        audioData,\n        numberOfSamples: barCount,\n        windowInSeconds: 1 / fps,\n      })\n    : Array(barCount)\n        .fill(0)\n        .map((_, i) => {\n          const seed = i * 1000;\n          return (\n            Math.max(\n              0.1,\n              Math.abs(Math.sin(frame / 10 + i / (barCount / (2 * Math.PI)))) +\n                random(seed) * 0.3\n            ) *\n              0.5 +\n            0.25\n          );\n        });\n\n  const bars = waveformSamples.map((sample, i) => {\n    const angleRad =\n      (i / barCount) * 2 * Math.PI + (rotationOffset * Math.PI) / 180;\n    const dynamicHeight = Math.max(barMinHeight, sample * waveAmplitude);\n\n    const x1 = centerX + radius * Math.cos(angleRad);\n    const y1 = centerY + radius * Math.sin(angleRad);\n    const x2 = centerX + (radius + dynamicHeight) * Math.cos(angleRad);\n    const y2 = centerY + (radius + dynamicHeight) * Math.sin(angleRad);\n\n    return {\n      x1,\n      y1,\n      x2,\n      y2,\n      height: dynamicHeight,\n    };\n  });\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        position: \"relative\",\n        ...containerStyle,\n      }}\n    >\n      <svg width=\"100%\" height=\"100%\" style={{ overflow: \"visible\" }}>\n        {bars.map((bar, i) => (\n          <line\n            key={i}\n            x1={bar.x1}\n            y1={bar.y1}\n            x2={bar.x2}\n            y2={bar.y2}\n            stroke={barColor}\n            strokeWidth={barWidth}\n            strokeLinecap={strokeLinecap}\n            style={{\n              transitionProperty: \"all\",\n              transitionDuration: transitionDuration,\n              transitionTimingFunction: transitionTimingFunction,\n              ...barStyle,\n            }}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}