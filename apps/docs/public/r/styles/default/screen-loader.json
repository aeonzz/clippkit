{
  "name": "screen-loader",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/screen-loader.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { Easing, interpolate, useCurrentFrame } from \"remotion\";\n\nexport interface ScreenLoaderProps {\n  // Loader appearance\n  loaderSize?: number; // Size of the moving square\n  loaderColor?: string; // Color of the moving square\n\n  // Container dimensions (where the loader will travel)\n  // These props will be used to calculate the path.\n  // The parent component rendering this loader should have these dimensions\n  // and typically 'position: relative'.\n  containerWidth: number;\n  containerHeight: number;\n\n  // Animation behavior\n  durationInFrames?: number; // Duration for one full loop\n  loop?: boolean; // Whether the animation should loop\n}\n\nexport default function ScreenLoader({\n  loaderSize = 20,\n  loaderColor = \"blue\", // Default to a theme color if possible, or a generic one\n  containerWidth,\n  containerHeight,\n  durationInFrames = 120, // e.g., 4 seconds at 30fps\n  loop = true,\n}: ScreenLoaderProps) {\n  const frame = useCurrentFrame();\n\n  // Calculate the path lengths for the loader's top-left corner\n  const pathWidth = containerWidth - loaderSize;\n  const pathHeight = containerHeight - loaderSize;\n\n  const L1 = pathWidth; // Top edge\n  const L2 = pathHeight; // Right edge\n  const L3 = pathWidth; // Bottom edge\n  const L4 = pathHeight; // Left edge\n  const totalPathLength = L1 + L2 + L3 + L4;\n\n  const progress = React.useMemo(() => {\n    if (totalPathLength === 0) return 0; // Avoid division by zero if path is zero length\n\n    const currentFrameInCycle = loop\n      ? frame % durationInFrames\n      : Math.min(frame, durationInFrames - 1); // durationInFrames is count, so 0 to N-1\n\n    return interpolate(\n      currentFrameInCycle,\n      [0, durationInFrames - 1], // Frame range\n      [0, 1], // Progress range (0 to 1)\n      { extrapolateRight: \"clamp\", easing: Easing.linear }\n    );\n  }, [frame, durationInFrames, loop, totalPathLength]);\n\n  if (pathWidth < 0 || pathHeight < 0) {\n    // Container is too small for the loader, render nothing or a warning\n    console.warn(\n      \"ScreenLoader: Container is smaller than loaderSize. Loader might not be visible or behave unexpectedly.\"\n    );\n    return null;\n  }\n\n  const currentDistance = progress * totalPathLength;\n\n  let x = 0;\n  let y = 0;\n\n  if (currentDistance <= L1) {\n    // On top edge, moving right\n    x = currentDistance;\n    y = 0;\n  } else if (currentDistance <= L1 + L2) {\n    // On right edge, moving down\n    x = L1;\n    y = currentDistance - L1;\n  } else if (currentDistance <= L1 + L2 + L3) {\n    // On bottom edge, moving left\n    x = L1 - (currentDistance - (L1 + L2));\n    y = L2;\n  } else {\n    // On left edge, moving up\n    x = 0;\n    y = L2 - (currentDistance - (L1 + L2 + L3));\n  }\n\n  // Ensure x and y are not NaN if totalPathLength is 0\n  if (totalPathLength === 0) {\n    x = 0;\n    y = 0;\n  }\n\n  const loaderStyle: React.CSSProperties = {\n    position: \"absolute\",\n    width: loaderSize,\n    height: loaderSize,\n    backgroundColor: loaderColor,\n    left: x,\n    top: y,\n    // transform: `translate(${x}px, ${y}px)`, // Using left/top is often simpler for this\n  };\n\n  return <div style={loaderStyle} />;\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}