{
  "name": "u-circular-loader",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/circular-loader/page.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Player } from \"@remotion/player\";\r\n\r\nimport CircularLoader, {\r\n  CircularProgressProps,\r\n} from \"@/registry/default/components/circular-loader\";\r\n\r\n// Adjust path as necessary\r\n\r\n// This Composition component will pass props to the new CircularLoader\r\ninterface CircularLoaderCompositionProps {\r\n  loaderProps: CircularProgressProps; // Changed to avoid confusion with the old name\r\n}\r\n\r\nconst CircularLoaderComposition: React.FC<CircularLoaderCompositionProps> = ({\r\n  loaderProps,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <CircularLoader {...loaderProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CircularLoaderDemo() {\r\n  const loaderPropsForDemo = React.useMemo<CircularProgressProps>(\r\n    () => ({\r\n      size: 250,\r\n      progressSource: \"time\",\r\n      durationInFrames: 120, // 4 seconds at 30fps\r\n      loopProgress: true,\r\n      // Track\r\n      showTrack: true,\r\n      trackColor: \"rgba(100, 100, 100, 0.3)\",\r\n      trackStrokeWidth: 10,\r\n      // Progress Arc\r\n      progressStrokeWidth: 12,\r\n      progressStrokeLinecap: \"round\",\r\n      progressColorMode: \"solid\",\r\n      progressSolidColor: \"var(--primary)\",\r\n      // Pulse\r\n      enablePulse: true,\r\n      pulseMagnitude: 0.03,\r\n      pulseSpeed: 0,\r\n      // Text\r\n      showPercentageText: true,\r\n      textColor: \"var(--primary)\",\r\n      textSize: \"3rem\",\r\n      textFontWeight: \"600\",\r\n    }),\r\n    []\r\n  );\r\n\r\n  const playerDurationInFrames = 120; // Match durationInFrames for a full cycle example\r\n\r\n  return (\r\n    <div className=\"aspect-video h-[180px] sm:h-[350px] md:h-[400px]\">\r\n      <Player\r\n        component={CircularLoaderComposition}\r\n        inputProps={{ loaderProps: loaderPropsForDemo }} // Pass the new props object\r\n        durationInFrames={playerDurationInFrames}\r\n        compositionWidth={640}\r\n        compositionHeight={480} // Increased height for better viewing\r\n        fps={30}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        controls\r\n        loop\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/circular-loader.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Easing, interpolate, useCurrentFrame } from \"remotion\";\r\n\r\nexport interface CircularProgressProps {\r\n  // Overall appearance & behavior\r\n  size?: number; // Overall size of the component\r\n  progressSource?: \"time\" | \"prop\"; // 'time' for animation, 'prop' for external control\r\n  progress?: number; // Current progress (0-100), used if progressSource is 'prop'\r\n  durationInFrames?: number; // Duration for one full 0-100% cycle if progressSource is 'time'\r\n  loopProgress?: boolean; // Whether the progress animation should loop\r\n\r\n  // Background (Track) Circle\r\n  showTrack?: boolean;\r\n  trackColor?: string;\r\n  trackStrokeWidth?: number;\r\n\r\n  // Progress Arc\r\n  progressStrokeWidth?: number;\r\n  progressStrokeLinecap?: \"butt\" | \"round\" | \"square\";\r\n  progressColorMode?: \"solid\" | \"gradient\";\r\n  progressSolidColor?: string;\r\n  progressGradientStartColor?: string;\r\n  progressGradientEndColor?: string;\r\n\r\n  // Rotating Dots\r\n  showRotatingDots?: boolean;\r\n  dotColor?: string;\r\n  dotRadius?: number;\r\n  dotDistanceFromCenter?: number; // Distance of the dot from the center of the main circle\r\n  rotationSpeed?: number; // Multiplier for rotation speed, positive for clockwise, negative for counter-clockwise\r\n\r\n  // Pulse Effect\r\n  enablePulse?: boolean;\r\n  pulseMagnitude?: number; // e.g., 0.05 for 5% pulse\r\n  pulseSpeed?: number; // Speed of the pulse animation\r\n\r\n  // Percentage Text\r\n  showPercentageText?: boolean;\r\n  textColor?: string;\r\n  textSize?: string | number;\r\n  textFontWeight?: string | number;\r\n  textStyle?: React.CSSProperties;\r\n\r\n  // Container\r\n  containerStyle?: React.CSSProperties;\r\n}\r\n\r\nexport default function CircularLoader({\r\n  // Overall appearance & behavior\r\n  size = 200,\r\n  progressSource = \"time\",\r\n  progress: propProgress = 0,\r\n  durationInFrames = 90,\r\n  loopProgress = true,\r\n\r\n  // Background (Track) Circle\r\n  showTrack = true,\r\n  trackColor = \"rgba(255, 255, 255, 0.1)\",\r\n  trackStrokeWidth = 12,\r\n\r\n  // Progress Arc\r\n  progressStrokeWidth = 12,\r\n  progressStrokeLinecap = \"round\",\r\n  progressColorMode = \"gradient\",\r\n  progressSolidColor = \"#3b82f6\",\r\n  progressGradientStartColor = \"#3b82f6\",\r\n  progressGradientEndColor = \"#1e3a8a\",\r\n\r\n  // Pulse Effect\r\n  enablePulse = true,\r\n  pulseMagnitude = 0.05,\r\n  pulseSpeed = 10,\r\n\r\n  // Percentage Text\r\n  showPercentageText = true,\r\n  textColor = \"white\",\r\n  textSize = \"3rem\",\r\n  textFontWeight = \"bold\",\r\n  textStyle,\r\n\r\n  // Container\r\n  containerStyle,\r\n}: CircularProgressProps) {\r\n  const frame = useCurrentFrame();\r\n  // const { fps } = useVideoConfig(); // fps is not used in this version\r\n\r\n  const actualRadius =\r\n    (size - Math.max(trackStrokeWidth, progressStrokeWidth)) / 2;\r\n  const circumference = 2 * Math.PI * actualRadius;\r\n\r\n  const currentProgress = React.useMemo(() => {\r\n    if (progressSource === \"prop\") {\r\n      return Math.min(100, Math.max(0, propProgress));\r\n    }\r\n    // Time-based progress\r\n    const totalFramesForCycle = durationInFrames;\r\n    const currentFrameInCycle = loopProgress\r\n      ? frame % totalFramesForCycle\r\n      : Math.min(frame, totalFramesForCycle);\r\n    return interpolate(\r\n      currentFrameInCycle,\r\n      [0, totalFramesForCycle],\r\n      [0, 100],\r\n      { extrapolateRight: \"clamp\", easing: Easing.linear }\r\n    );\r\n  }, [frame, progressSource, propProgress, durationInFrames, loopProgress]);\r\n\r\n  const strokeDashoffset =\r\n    circumference - (currentProgress / 100) * circumference;\r\n  const pulse = enablePulse\r\n    ? 1 + Math.sin(frame / pulseSpeed) * pulseMagnitude\r\n    : 1;\r\n\r\n  const mainContainerStyle: React.CSSProperties = {\r\n    position: \"relative\",\r\n    width: size,\r\n    height: size,\r\n    transform: `scale(${pulse})`,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    ...containerStyle, // Allow user to override default centering etc.\r\n  };\r\n\r\n  const svgViewBox = `0 0 ${size} ${size}`;\r\n  const svgStyle: React.CSSProperties = {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    transform: \"rotate(-90deg)\", // Start arc from the top\r\n    transformOrigin: \"center center\",\r\n  };\r\n\r\n  const percentageTextStyle: React.CSSProperties = {\r\n    position: \"absolute\", // Ensure it's centered within the main container\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    fontSize: textSize,\r\n    fontWeight: textFontWeight,\r\n    color: textColor,\r\n    zIndex: 2, // Above SVG elements\r\n    ...textStyle,\r\n  };\r\n\r\n  return (\r\n    <div style={mainContainerStyle}>\r\n      {/* Background circle */}\r\n      {showTrack && (\r\n        <svg width=\"100%\" height=\"100%\" viewBox={svgViewBox} style={svgStyle}>\r\n          <circle\r\n            cx={size / 2}\r\n            cy={size / 2}\r\n            r={actualRadius}\r\n            fill=\"none\"\r\n            stroke={trackColor}\r\n            strokeWidth={trackStrokeWidth}\r\n          />\r\n        </svg>\r\n      )}\r\n\r\n      {/* Progress circle */}\r\n      <svg width=\"100%\" height=\"100%\" viewBox={svgViewBox} style={svgStyle}>\r\n        <defs>\r\n          {progressColorMode === \"gradient\" && (\r\n            <linearGradient\r\n              id=\"progressGradient\"\r\n              x1=\"0%\"\r\n              y1=\"0%\"\r\n              x2=\"100%\"\r\n              y2=\"0%\"\r\n            >\r\n              <stop offset=\"0%\" stopColor={progressGradientStartColor} />\r\n              <stop offset=\"100%\" stopColor={progressGradientEndColor} />\r\n            </linearGradient>\r\n          )}\r\n        </defs>\r\n        <circle\r\n          cx={size / 2}\r\n          cy={size / 2}\r\n          r={actualRadius}\r\n          fill=\"none\"\r\n          stroke={\r\n            progressColorMode === \"gradient\"\r\n              ? \"url(#progressGradient)\"\r\n              : progressSolidColor\r\n          }\r\n          strokeWidth={progressStrokeWidth}\r\n          strokeDasharray={circumference}\r\n          strokeDashoffset={strokeDashoffset}\r\n          strokeLinecap={progressStrokeLinecap}\r\n        />\r\n      </svg>\r\n\r\n      {/* Percentage text */}\r\n      {showPercentageText && (\r\n        <div style={percentageTextStyle}>{Math.round(currentProgress)}%</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}