{
  "name": "u-circular-loader",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/circular-loader/page.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Player } from \"@remotion/player\";\r\n\r\nimport CircularLoader, {\r\n  CircularProgressProps,\r\n} from \"@/registry/default/components/circular-loader\";\r\n\r\n// Adjust path as necessary\r\n\r\n// This Composition component will pass props to the new CircularLoader\r\ninterface CircularLoaderCompositionProps {\r\n  loaderProps: CircularProgressProps; // Changed to avoid confusion with the old name\r\n}\r\n\r\nconst CircularLoaderComposition: React.FC<CircularLoaderCompositionProps> = ({\r\n  loaderProps,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <CircularLoader {...loaderProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CircularLoaderDemo() {\r\n  const loaderPropsForDemo = React.useMemo<CircularProgressProps>(\r\n    () => ({\r\n      size: 250,\r\n      progressSource: \"time\",\r\n      durationInFrames: 120, // 4 seconds at 30fps\r\n      loopProgress: true,\r\n      // Track\r\n      showTrack: true,\r\n      trackColor: \"rgba(100, 100, 100, 0.3)\",\r\n      trackStrokeWidth: 10,\r\n      // Progress Arc\r\n      progressStrokeWidth: 12,\r\n      progressStrokeLinecap: \"round\",\r\n      progressColorMode: \"solid\",\r\n      progressSolidColor: \"var(--primary)\",\r\n      // Pulse\r\n      enablePulse: true,\r\n      pulseMagnitude: 0.03,\r\n      pulseSpeed: 0,\r\n      // Text\r\n      showPercentageText: true,\r\n      textColor: \"var(--primary)\",\r\n      textSize: \"3rem\",\r\n      textFontWeight: \"600\",\r\n    }),\r\n    []\r\n  );\r\n\r\n  const playerDurationInFrames = 120; // Match durationInFrames for a full cycle example\r\n\r\n  return (\r\n    <div className=\"aspect-video h-[180px] sm:h-[350px] md:h-[400px]\">\r\n      <Player\r\n        component={CircularLoaderComposition}\r\n        inputProps={{ loaderProps: loaderPropsForDemo }} // Pass the new props object\r\n        durationInFrames={playerDurationInFrames}\r\n        compositionWidth={640}\r\n        compositionHeight={480} // Increased height for better viewing\r\n        fps={30}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        controls\r\n        loop\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/circular-loader.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { Easing, interpolate, useCurrentFrame } from \"remotion\";\n\nexport interface CircularProgressProps {\n  // Overall appearance & behavior\n  size?: number; // Overall size of the component\n  progressSource?: \"time\" | \"prop\"; // 'time' for animation, 'prop' for external control\n  progress?: number; // Current progress (0-100), used if progressSource is 'prop'\n  durationInFrames?: number; // Duration for one full 0-100% cycle if progressSource is 'time'\n  loopProgress?: boolean; // Whether the progress animation should loop\n\n  // Background (Track) Circle\n  showTrack?: boolean;\n  trackColor?: string;\n  trackStrokeWidth?: number;\n\n  // Progress Arc\n  progressStrokeWidth?: number;\n  progressStrokeLinecap?: \"butt\" | \"round\" | \"square\";\n  progressColorMode?: \"solid\" | \"gradient\";\n  progressSolidColor?: string;\n  progressGradientStartColor?: string;\n  progressGradientEndColor?: string;\n\n  // Rotating Dots\n  showRotatingDots?: boolean;\n  dotColor?: string;\n  dotRadius?: number;\n  dotDistanceFromCenter?: number; // Distance of the dot from the center of the main circle\n  rotationSpeed?: number; // Multiplier for rotation speed, positive for clockwise, negative for counter-clockwise\n\n  // Pulse Effect\n  enablePulse?: boolean;\n  pulseMagnitude?: number; // e.g., 0.05 for 5% pulse\n  pulseSpeed?: number; // Speed of the pulse animation\n\n  // Percentage Text\n  showPercentageText?: boolean;\n  textColor?: string;\n  textSize?: string | number;\n  textFontWeight?: string | number;\n  textStyle?: React.CSSProperties;\n\n  // Container\n  containerStyle?: React.CSSProperties;\n}\n\nexport default function CircularLoader({\n  // Overall appearance & behavior\n  size = 200,\n  progressSource = \"time\",\n  progress: propProgress = 0,\n  durationInFrames = 90,\n  loopProgress = true,\n\n  // Background (Track) Circle\n  showTrack = true,\n  trackColor = \"rgba(255, 255, 255, 0.1)\",\n  trackStrokeWidth = 12,\n\n  // Progress Arc\n  progressStrokeWidth = 12,\n  progressStrokeLinecap = \"round\",\n  progressColorMode = \"gradient\",\n  progressSolidColor = \"#3b82f6\",\n  progressGradientStartColor = \"#3b82f6\",\n  progressGradientEndColor = \"#1e3a8a\",\n\n  // Pulse Effect\n  enablePulse = true,\n  pulseMagnitude = 0.05,\n  pulseSpeed = 10,\n\n  // Percentage Text\n  showPercentageText = true,\n  textColor = \"white\",\n  textSize = \"3rem\",\n  textFontWeight = \"bold\",\n  textStyle,\n\n  // Container\n  containerStyle,\n}: CircularProgressProps) {\n  const frame = useCurrentFrame();\n  // const { fps } = useVideoConfig(); // fps is not used in this version\n\n  const actualRadius =\n    (size - Math.max(trackStrokeWidth, progressStrokeWidth)) / 2;\n  const circumference = 2 * Math.PI * actualRadius;\n\n  const currentProgress = React.useMemo(() => {\n    if (progressSource === \"prop\") {\n      return Math.min(100, Math.max(0, propProgress));\n    }\n    // Time-based progress\n    const totalFramesForCycle = durationInFrames;\n    const currentFrameInCycle = loopProgress\n      ? frame % totalFramesForCycle\n      : Math.min(frame, totalFramesForCycle);\n    return interpolate(\n      currentFrameInCycle,\n      [0, totalFramesForCycle],\n      [0, 100],\n      { extrapolateRight: \"clamp\", easing: Easing.linear }\n    );\n  }, [frame, progressSource, propProgress, durationInFrames, loopProgress]);\n\n  const strokeDashoffset =\n    circumference - (currentProgress / 100) * circumference;\n  const pulse = enablePulse\n    ? 1 + Math.sin(frame / pulseSpeed) * pulseMagnitude\n    : 1;\n\n  const mainContainerStyle: React.CSSProperties = {\n    position: \"relative\",\n    width: size,\n    height: size,\n    transform: `scale(${pulse})`,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...containerStyle, // Allow user to override default centering etc.\n  };\n\n  const svgViewBox = `0 0 ${size} ${size}`;\n  const svgStyle: React.CSSProperties = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    transform: \"rotate(-90deg)\", // Start arc from the top\n    transformOrigin: \"center center\",\n  };\n\n  const percentageTextStyle: React.CSSProperties = {\n    position: \"absolute\", // Ensure it's centered within the main container\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    fontSize: textSize,\n    fontWeight: textFontWeight,\n    color: textColor,\n    zIndex: 2, // Above SVG elements\n    ...textStyle,\n  };\n\n  return (\n    <div style={mainContainerStyle}>\n      {/* Background circle */}\n      {showTrack && (\n        <svg width=\"100%\" height=\"100%\" viewBox={svgViewBox} style={svgStyle}>\n          <circle\n            cx={size / 2}\n            cy={size / 2}\n            r={actualRadius}\n            fill=\"none\"\n            stroke={trackColor}\n            strokeWidth={trackStrokeWidth}\n          />\n        </svg>\n      )}\n\n      {/* Progress circle */}\n      <svg width=\"100%\" height=\"100%\" viewBox={svgViewBox} style={svgStyle}>\n        <defs>\n          {progressColorMode === \"gradient\" && (\n            <linearGradient\n              id=\"progressGradient\"\n              x1=\"0%\"\n              y1=\"0%\"\n              x2=\"100%\"\n              y2=\"0%\"\n            >\n              <stop offset=\"0%\" stopColor={progressGradientStartColor} />\n              <stop offset=\"100%\" stopColor={progressGradientEndColor} />\n            </linearGradient>\n          )}\n        </defs>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={actualRadius}\n          fill=\"none\"\n          stroke={\n            progressColorMode === \"gradient\"\n              ? \"url(#progressGradient)\"\n              : progressSolidColor\n          }\n          strokeWidth={progressStrokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap={progressStrokeLinecap}\n        />\n      </svg>\n\n      {/* Percentage text */}\n      {showPercentageText && (\n        <div style={percentageTextStyle}>{Math.round(currentProgress)}%</div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}