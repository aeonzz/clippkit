{
  "name": "toast-card",
  "type": "registry:component",
  "dependencies": [
    "remotion"
  ],
  "files": [
    {
      "path": "components/toast-card.tsx",
      "content": "\"use client\";\r\n\r\nimport { interpolate, spring, useCurrentFrame, useVideoConfig } from \"remotion\";\r\n\r\nexport type PositionPreset =\r\n  | \"bottom-left\"\r\n  | \"bottom-right\"\r\n  | \"top-left\"\r\n  | \"top-right\"\r\n  | \"center\";\r\n\r\ninterface ToastCardProps {\r\n  title?: string;\r\n  message?: string;\r\n  titleColor?: string;\r\n  messageColor?: string;\r\n  backgroundColor?: string;\r\n  titleFontSize?: string;\r\n  messageFontSize?: string;\r\n  width?: string;\r\n  padding?: string;\r\n  borderRadius?: string;\r\n  borderColor?: string;\r\n  borderWidth?: string;\r\n  borderStyle?: \"solid\" | \"dashed\" | \"dotted\";\r\n  boxShadow?: string;\r\n  positionPreset?: PositionPreset;\r\n  margin?: string; // e.g., \"20px\"\r\n\r\n  entryDurationInFrames?: number;\r\n  visibleDurationInFrames?: number;\r\n  exitDurationInFrames?: number;\r\n\r\n  damping?: number;\r\n  mass?: number;\r\n  stiffness?: number;\r\n\r\n  fontFamily?: string;\r\n  slideOffset?: number; // e.g., 50 (pixels) for vertical slide\r\n}\r\n\r\nexport default function ToastCard({\r\n  title = \"Success!\",\r\n  message = \"Your action was completed.\",\r\n  titleColor = \"var(--card-foreground)\",\r\n  messageColor = \"var(--card-foreground)\",\r\n  backgroundColor = \"var(--card)\",\r\n  titleFontSize = \"1.1rem\",\r\n  messageFontSize = \"0.9rem\",\r\n  width = \"300px\",\r\n  padding = \"15px 20px\",\r\n  borderRadius = \"10px\",\r\n  borderColor = \"var(--border)\",\r\n  borderWidth = \"1px\",\r\n  borderStyle = \"solid\",\r\n  boxShadow = \"0 4px 12px rgba(0,0,0,0.1)\",\r\n  positionPreset = \"bottom-left\",\r\n  margin = \"20px\",\r\n\r\n  entryDurationInFrames = 30,\r\n  visibleDurationInFrames = 120,\r\n  exitDurationInFrames = 30,\r\n\r\n  damping = 25,\r\n  mass = 0.7,\r\n  stiffness = 180,\r\n  fontFamily = \"Inter, sans-serif\",\r\n  slideOffset = 50, // pixels to slide in/out by\r\n}: ToastCardProps) {\r\n  const frame = useCurrentFrame();\r\n  const { fps } = useVideoConfig();\r\n\r\n  const exitAnimationStartFrame =\r\n    entryDurationInFrames + visibleDurationInFrames;\r\n  const totalComponentAnimationDuration =\r\n    entryDurationInFrames + visibleDurationInFrames + exitDurationInFrames;\r\n\r\n  const entryAnimProgress = spring({\r\n    frame,\r\n    fps,\r\n    from: 0,\r\n    to: 1,\r\n    durationInFrames: entryDurationInFrames,\r\n    config: { damping, mass, stiffness },\r\n  });\r\n\r\n  const exitAnimProgress = spring({\r\n    frame: frame - exitAnimationStartFrame,\r\n    fps,\r\n    from: 0,\r\n    to: 1,\r\n    durationInFrames: exitDurationInFrames,\r\n    config: { damping, mass, stiffness: stiffness / 1.5 }, // Softer exit\r\n  });\r\n\r\n  const opacity =\r\n    interpolate(entryAnimProgress, [0, 1], [0, 1]) *\r\n    interpolate(exitAnimProgress, [0, 1], [1, 0]);\r\n\r\n  let yTranslateStart = 0;\r\n  const scaleStart = 0.95;\r\n  const scaleEnd = 1;\r\n\r\n  if (positionPreset === \"bottom-left\" || positionPreset === \"bottom-right\") {\r\n    yTranslateStart = slideOffset; // Start from below\r\n  } else if (positionPreset === \"top-left\" || positionPreset === \"top-right\") {\r\n    yTranslateStart = -slideOffset; // Start from above\r\n  } else if (positionPreset === \"center\") {\r\n    yTranslateStart = slideOffset; // Center also slides, use full slideOffset from bottom\r\n  }\r\n\r\n  const yPos =\r\n    interpolate(entryAnimProgress, [0, 1], [yTranslateStart, 0]) +\r\n    interpolate(exitAnimProgress, [0, 1], [0, yTranslateStart]); // Exit to the same direction it came from\r\n\r\n  const scale =\r\n    positionPreset === \"center\"\r\n      ? interpolate(entryAnimProgress, [0, 1], [scaleStart, scaleEnd]) *\r\n        interpolate(exitAnimProgress, [0, 1], [scaleEnd, scaleStart])\r\n      : 1;\r\n\r\n  const transformProperties: string[] = [];\r\n  if (positionPreset === \"center\") {\r\n    transformProperties.push(`translate(-50%, -50%)`); // Center alignment first\r\n  }\r\n  transformProperties.push(`translateY(${yPos}px)`);\r\n  if (scale !== 1) {\r\n    // Only add scale if it's not 1 to keep transform shorter\r\n    transformProperties.push(`scale(${scale})`);\r\n  }\r\n\r\n  const cardStyle: React.CSSProperties = {\r\n    position: \"absolute\",\r\n    width,\r\n    padding,\r\n    background: backgroundColor,\r\n    borderRadius,\r\n    borderColor,\r\n    borderWidth,\r\n    borderStyle,\r\n    boxShadow,\r\n    fontFamily,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    gap: \"5px\",\r\n    boxSizing: \"border-box\",\r\n    opacity,\r\n    transform: transformProperties.join(\" \"),\r\n  };\r\n\r\n  if (positionPreset === \"center\") {\r\n    cardStyle.top = \"50%\";\r\n    cardStyle.left = \"50%\";\r\n  } else {\r\n    // Vertical positioning\r\n    if (positionPreset.includes(\"bottom\")) {\r\n      cardStyle.bottom = margin;\r\n    } else if (positionPreset.includes(\"top\")) {\r\n      cardStyle.top = margin;\r\n    }\r\n\r\n    // Horizontal positioning\r\n    if (positionPreset.includes(\"left\")) {\r\n      cardStyle.left = margin;\r\n      cardStyle.right = \"auto\"; // Explicitly set right to auto\r\n    } else if (positionPreset.includes(\"right\")) {\r\n      cardStyle.right = margin;\r\n      cardStyle.left = \"auto\"; // Explicitly set left to auto\r\n    } else {\r\n      // Fallback or default horizontal positioning if needed\r\n      // For current defined presets, this path shouldn't be taken.\r\n      // If it were, centering horizontally might be a safe default:\r\n      // cardStyle.left = \"50%\";\r\n      // if (!transformProperties.some(t => t.startsWith(\"translateX\")) && !positionPreset.includes(\"center\")) {\r\n      // transformProperties.unshift(\"translateX(-50%)\");\r\n      // }\r\n    }\r\n  }\r\n\r\n  // Don't render if fully exited and transparent (past its animation lifecycle)\r\n  if (frame >= totalComponentAnimationDuration && opacity < 0.01) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={cardStyle}>\r\n      {title && (\r\n        <h3\r\n          style={{\r\n            margin: 0,\r\n            fontSize: titleFontSize,\r\n            fontWeight: \"bold\",\r\n            color: titleColor,\r\n          }}\r\n        >\r\n          {title}\r\n        </h3>\r\n      )}\r\n      {message && (\r\n        <p\r\n          style={{\r\n            margin: 0,\r\n            fontSize: messageFontSize,\r\n            color: messageColor,\r\n            opacity: 0.9,\r\n          }}\r\n        >\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}