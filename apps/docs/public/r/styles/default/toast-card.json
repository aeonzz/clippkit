{
  "name": "toast-card",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/toast-card.tsx",
      "content": "\"use client\";\n\nimport { interpolate, spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n\nexport type PositionPreset =\n  | \"bottom-left\"\n  | \"bottom-right\"\n  | \"top-left\"\n  | \"top-right\"\n  | \"center\";\n\ninterface ToastCardProps {\n  title?: string;\n  message?: string;\n  titleColor?: string;\n  messageColor?: string;\n  backgroundColor?: string;\n  titleFontSize?: string;\n  messageFontSize?: string;\n  width?: string;\n  padding?: string;\n  borderRadius?: string;\n  borderColor?: string;\n  borderWidth?: string;\n  borderStyle?: \"solid\" | \"dashed\" | \"dotted\";\n  boxShadow?: string;\n  positionPreset?: PositionPreset;\n  margin?: string; // e.g., \"20px\"\n\n  entryDurationInFrames?: number;\n  visibleDurationInFrames?: number;\n  exitDurationInFrames?: number;\n\n  damping?: number;\n  mass?: number;\n  stiffness?: number;\n\n  fontFamily?: string;\n  slideOffset?: number; // e.g., 50 (pixels) for vertical slide\n}\n\nexport default function ToastCard({\n  title = \"Success!\",\n  message = \"Your action was completed.\",\n  titleColor = \"var(--card-foreground)\",\n  messageColor = \"var(--card-foreground)\",\n  backgroundColor = \"var(--card)\",\n  titleFontSize = \"1.1rem\",\n  messageFontSize = \"0.9rem\",\n  width = \"300px\",\n  padding = \"15px 20px\",\n  borderRadius = \"10px\",\n  borderColor = \"var(--border)\",\n  borderWidth = \"1px\",\n  borderStyle = \"solid\",\n  boxShadow = \"0 4px 12px rgba(0,0,0,0.1)\",\n  positionPreset = \"bottom-left\",\n  margin = \"20px\",\n\n  entryDurationInFrames = 30,\n  visibleDurationInFrames = 120,\n  exitDurationInFrames = 30,\n\n  damping = 25,\n  mass = 0.7,\n  stiffness = 180,\n  fontFamily = \"Inter, sans-serif\",\n  slideOffset = 50, // pixels to slide in/out by\n}: ToastCardProps) {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const exitAnimationStartFrame =\n    entryDurationInFrames + visibleDurationInFrames;\n  const totalComponentAnimationDuration =\n    entryDurationInFrames + visibleDurationInFrames + exitDurationInFrames;\n\n  const entryAnimProgress = spring({\n    frame,\n    fps,\n    from: 0,\n    to: 1,\n    durationInFrames: entryDurationInFrames,\n    config: { damping, mass, stiffness },\n  });\n\n  const exitAnimProgress = spring({\n    frame: frame - exitAnimationStartFrame,\n    fps,\n    from: 0,\n    to: 1,\n    durationInFrames: exitDurationInFrames,\n    config: { damping, mass, stiffness: stiffness / 1.5 }, // Softer exit\n  });\n\n  const opacity =\n    interpolate(entryAnimProgress, [0, 1], [0, 1]) *\n    interpolate(exitAnimProgress, [0, 1], [1, 0]);\n\n  let yTranslateStart = 0;\n  const scaleStart = 0.95;\n  const scaleEnd = 1;\n\n  if (positionPreset === \"bottom-left\" || positionPreset === \"bottom-right\") {\n    yTranslateStart = slideOffset; // Start from below\n  } else if (positionPreset === \"top-left\" || positionPreset === \"top-right\") {\n    yTranslateStart = -slideOffset; // Start from above\n  } else if (positionPreset === \"center\") {\n    yTranslateStart = slideOffset; // Center also slides, use full slideOffset from bottom\n  }\n\n  const yPos =\n    interpolate(entryAnimProgress, [0, 1], [yTranslateStart, 0]) +\n    interpolate(exitAnimProgress, [0, 1], [0, yTranslateStart]); // Exit to the same direction it came from\n\n  const scale =\n    positionPreset === \"center\"\n      ? interpolate(entryAnimProgress, [0, 1], [scaleStart, scaleEnd]) *\n        interpolate(exitAnimProgress, [0, 1], [scaleEnd, scaleStart])\n      : 1;\n\n  const transformProperties: string[] = [];\n  if (positionPreset === \"center\") {\n    transformProperties.push(`translate(-50%, -50%)`); // Center alignment first\n  }\n  transformProperties.push(`translateY(${yPos}px)`);\n  if (scale !== 1) {\n    // Only add scale if it's not 1 to keep transform shorter\n    transformProperties.push(`scale(${scale})`);\n  }\n\n  const cardStyle: React.CSSProperties = {\n    position: \"absolute\",\n    width,\n    padding,\n    background: backgroundColor,\n    borderRadius,\n    borderColor,\n    borderWidth,\n    borderStyle,\n    boxShadow,\n    fontFamily,\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"5px\",\n    boxSizing: \"border-box\",\n    opacity,\n    transform: transformProperties.join(\" \"),\n  };\n\n  if (positionPreset === \"center\") {\n    cardStyle.top = \"50%\";\n    cardStyle.left = \"50%\";\n  } else {\n    // Vertical positioning\n    if (positionPreset.includes(\"bottom\")) {\n      cardStyle.bottom = margin;\n    } else if (positionPreset.includes(\"top\")) {\n      cardStyle.top = margin;\n    }\n\n    // Horizontal positioning\n    if (positionPreset.includes(\"left\")) {\n      cardStyle.left = margin;\n      cardStyle.right = \"auto\"; // Explicitly set right to auto\n    } else if (positionPreset.includes(\"right\")) {\n      cardStyle.right = margin;\n      cardStyle.left = \"auto\"; // Explicitly set left to auto\n    } else {\n      // Fallback or default horizontal positioning if needed\n      // For current defined presets, this path shouldn't be taken.\n      // If it were, centering horizontally might be a safe default:\n      // cardStyle.left = \"50%\";\n      // if (!transformProperties.some(t => t.startsWith(\"translateX\")) && !positionPreset.includes(\"center\")) {\n      // transformProperties.unshift(\"translateX(-50%)\");\n      // }\n    }\n  }\n\n  // Don't render if fully exited and transparent (past its animation lifecycle)\n  if (frame >= totalComponentAnimationDuration && opacity < 0.01) {\n    return null;\n  }\n\n  return (\n    <div style={cardStyle}>\n      {title && (\n        <h3\n          style={{\n            margin: 0,\n            fontSize: titleFontSize,\n            fontWeight: \"bold\",\n            color: titleColor,\n          }}\n        >\n          {title}\n        </h3>\n      )}\n      {message && (\n        <p\n          style={{\n            margin: 0,\n            fontSize: messageFontSize,\n            color: messageColor,\n            opacity: 0.9,\n          }}\n        >\n          {message}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}