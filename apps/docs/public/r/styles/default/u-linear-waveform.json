{
  "name": "u-linear-waveform",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/linear-waveform/page.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { MediaUtilsAudioData, useAudioData } from \"@remotion/media-utils\";\r\nimport { Player } from \"@remotion/player\";\r\nimport { Audio } from \"remotion\"; // Import Audio\r\n\r\nimport LinearWaveform from \"@/registry/default/components/linear-waveform\"; // Adjust path as necessary\r\n\r\n// Media source for the demo\r\nconst MEDIA_SRC =\r\n  \"https://rwxrdxvxndclnqvznxfj.supabase.co/storage/v1/object/public/sounds//moon-landing.mp3\";\r\n\r\n// Define props for the new composition component\r\ninterface AudioWaveformCompositionProps {\r\n  linearWaveformProps: Omit<\r\n    React.ComponentProps<typeof LinearWaveform>,\r\n    \"audioData\"\r\n  > & { audioData?: MediaUtilsAudioData | null };\r\n  mediaSrc: string;\r\n}\r\n\r\n// New component combining LinearWaveform and Audio\r\nconst AudioWaveformComposition: React.FC<AudioWaveformCompositionProps> = ({\r\n  linearWaveformProps,\r\n  mediaSrc,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <LinearWaveform {...linearWaveformProps} />\r\n      <Audio src={mediaSrc} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function LinearWaveformDemo() {\r\n  const audioData = useAudioData(MEDIA_SRC);\r\n\r\n  const linearWaveformProps = React.useMemo(\r\n    () => ({\r\n      numberOfSamples: 108,\r\n      strokeColor: \"var(--foreground)\",\r\n      strokeWidth: 2,\r\n      fillColor: \"none\",\r\n      waveAmplitude: 100,\r\n      waveSpeed: 3,\r\n      audioData,\r\n      width: \"50%\",\r\n    }),\r\n    [audioData]\r\n  );\r\n\r\n  // Calculate duration in frames for the player for better readability\r\n  const playerDurationInFrames = audioData\r\n    ? Math.floor(audioData.durationInSeconds * 30)\r\n    : 300;\r\n\r\n  console.log(\"audioData\", audioData);\r\n  return (\r\n    <div className=\"aspect-video h-[180px] sm:h-[350px] md:h-[400px]\">\r\n      <Player\r\n        component={AudioWaveformComposition} // Use the new component\r\n        inputProps={{ linearWaveformProps, mediaSrc: MEDIA_SRC }} // Pass props directly for AudioWaveformComposition\r\n        durationInFrames={playerDurationInFrames} // Use the pre-calculated duration\r\n        compositionWidth={640}\r\n        compositionHeight={360}\r\n        fps={30}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        controls\r\n        loop\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/linear-waveform.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  createSmoothSvgPath,\n  MediaUtilsAudioData,\n  visualizeAudioWaveform,\n} from \"@remotion/media-utils\";\nimport { useCurrentFrame, useVideoConfig } from \"remotion\";\n\n// Helper function to generate waveform samples\nconst generateWaveformSamples = (\n  audioData: MediaUtilsAudioData | null | undefined,\n  numberOfSamples: number,\n  frame: number,\n  waveSpeed: number,\n  fps: number\n): number[] => {\n  if (audioData) {\n    return visualizeAudioWaveform({\n      fps,\n      frame,\n      audioData,\n      numberOfSamples,\n      windowInSeconds: 1 / fps, // Visualize a single frame's worth of audio\n    });\n  }\n  return Array(numberOfSamples)\n    .fill(0)\n    .map((_, i) => {\n      return (\n        Math.sin(frame / waveSpeed + (i / numberOfSamples) * 2 * Math.PI) *\n          0.5 +\n        0.5\n      );\n    });\n};\n\n// Helper function to calculate SVG path from samples\nconst calculateSvgPath = (\n  samples: number[],\n  finalWidth: number,\n  finalHeight: number,\n  waveAmplitude: number,\n  strokeWidth: number,\n  numberOfSamples: number\n): string => {\n  const points = samples.map((sample, i) => {\n    const x = (i / Math.max(1, numberOfSamples - 1)) * finalWidth;\n    let y = Math.round((sample - 0.5) * waveAmplitude + finalHeight / 2);\n    y = Math.max(strokeWidth / 2, Math.min(finalHeight - strokeWidth / 2, y));\n    return { x, y };\n  });\n\n  if (points.length > 1) {\n    return createSmoothSvgPath({ points }) as string;\n  }\n  if (points.length === 1) {\n    return `M 0 ${points[0].y} L ${finalWidth} ${points[0].y}`;\n  }\n  return \"\";\n};\n\ninterface LinearWaveformProps {\n  audioData?: MediaUtilsAudioData | null;\n  numberOfSamples?: number;\n  strokeColor?: string;\n  strokeWidth?: number;\n  fillColor?: string;\n  waveAmplitude?: number;\n  waveSpeed?: number;\n  containerStyle?: React.CSSProperties;\n  height?: string | number;\n  width?: string | number;\n}\n\nexport default function LinearWaveform({\n  audioData,\n  numberOfSamples = 64,\n  strokeColor = \"var(--foreground)\",\n  strokeWidth = 2,\n  fillColor = \"none\",\n  waveAmplitude = 100,\n  waveSpeed = 10,\n  containerStyle,\n  height: propHeight,\n  width: propWidth,\n}: LinearWaveformProps) {\n  const frame = useCurrentFrame();\n  const { width: videoWidth, height: videoHeight, fps } = useVideoConfig();\n\n  let computedWidth: number;\n  if (typeof propWidth === \"number\") {\n    computedWidth = propWidth;\n  } else if (typeof propWidth === \"string\" && propWidth.endsWith(\"%\")) {\n    const percentage = parseFloat(propWidth.substring(0, propWidth.length - 1));\n    computedWidth = !isNaN(percentage)\n      ? (percentage / 100) * videoWidth\n      : videoWidth;\n  } else {\n    computedWidth = videoWidth;\n  }\n\n  let computedHeight: number;\n  if (typeof propHeight === \"number\") {\n    computedHeight = propHeight;\n  } else if (typeof propHeight === \"string\" && propHeight.endsWith(\"%\")) {\n    const percentage = parseFloat(\n      propHeight.substring(0, propHeight.length - 1)\n    );\n    computedHeight = !isNaN(percentage)\n      ? (percentage / 100) * videoHeight\n      : videoHeight;\n  } else {\n    computedHeight = videoHeight;\n  }\n\n  const finalWidth = computedWidth;\n  const finalHeight = computedHeight;\n\n  const [svgPath, setSvgPath] = useState(\"\");\n\n  useEffect(() => {\n    const waveformData = generateWaveformSamples(\n      audioData,\n      numberOfSamples,\n      frame,\n      waveSpeed,\n      fps\n    );\n\n    const newPath = calculateSvgPath(\n      waveformData,\n      finalWidth,\n      finalHeight,\n      waveAmplitude,\n      strokeWidth,\n      numberOfSamples\n    );\n\n    setSvgPath(newPath);\n  }, [\n    frame,\n    audioData,\n    numberOfSamples,\n    waveAmplitude,\n    waveSpeed,\n    finalWidth,\n    finalHeight,\n    fps,\n    strokeWidth,\n  ]);\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        ...containerStyle,\n      }}\n    >\n      <svg\n        viewBox={`0 0 ${finalWidth} ${finalHeight}`}\n        width={finalWidth}\n        height={finalHeight}\n        style={{\n          width: finalWidth,\n          height: finalHeight,\n        }}\n      >\n        <path\n          d={svgPath}\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          fill={fillColor}\n        />\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}