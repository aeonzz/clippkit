{
  "name": "u-floating-card",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/floating-card/page.tsx",
      "content": "\"use client\";\r\n\r\nimport { Player } from \"@remotion/player\";\r\n\r\nimport FloatingCard from \"@/registry/default/components/floating-card\"; // Adjust path as necessary\r\n\r\nexport default function FloatingCardDemo() {\r\n  const floatingCardProps = {\r\n    text: \"Floating Card!\",\r\n    textColor: \"var(--foreground)\",\r\n    backgroundColor: \"var(--card)\",\r\n    fontSize: \"1.5rem\",\r\n    width: \"250px\",\r\n    height: \"180px\",\r\n    borderRadius: \"20px\",\r\n    borderColor: \"var(--primary)\",\r\n    borderWidth: \"1px\",\r\n    borderStyle: \"solid\" as const,\r\n    durationInFrames: 40, // Entry animation duration\r\n    damping: 15,\r\n    mass: 0.7,\r\n    stiffness: 110,\r\n    boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.2), 0 5px 10px rgba(0, 0, 0, 0.1)\",\r\n    floatAmplitude: 15, // Amplitude of the float\r\n    floatSpeed: 40, // Speed of the float\r\n  };\r\n\r\n  return (\r\n    <div className=\"aspect-video h-[180px] sm:h-[350px] md:h-[400px]\">\r\n      <Player\r\n        component={FloatingCard}\r\n        inputProps={floatingCardProps}\r\n        durationInFrames={180} // Total duration of the player timeline, longer to see float\r\n        compositionWidth={480}\r\n        compositionHeight={400}\r\n        fps={30}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        autoPlay\r\n        controls\r\n        loop\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/floating-card.tsx",
      "content": "\"use client\";\n\nimport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface FloatingCardProps {\n  text?: string;\n  textColor?: string;\n  backgroundColor?: string;\n  fontSize?: string;\n  width?: string;\n  height?: string;\n  borderRadius?: string;\n  borderColor?: string;\n  borderWidth?: string;\n  borderStyle?: \"solid\" | \"dashed\" | \"dotted\";\n  durationInFrames?: number; // Duration of the entry animation\n  damping?: number;\n  mass?: number;\n  stiffness?: number;\n  boxShadow?: string;\n  floatAmplitude?: number; // How much the card floats up and down\n  floatSpeed?: number; // Speed of the floating animation\n}\n\nexport default function FloatingCard({\n  text = \"Floating Card\",\n  textColor = \"var(--card-foreground)\",\n  backgroundColor = \"var(--card)\",\n  fontSize = \"1.25rem\",\n  width = \"200px\",\n  height = \"280px\",\n  borderRadius = \"15px\",\n  borderColor = \"var(--ring)\",\n  borderWidth = \"1px\",\n  borderStyle = \"solid\",\n  durationInFrames = 30, // Shorter for entry animation\n  damping = 12,\n  mass = 0.5,\n  stiffness = 100,\n  boxShadow = `0 1px 3px var(--border), 0 6px 12px oklch(from var(--border) calc(l - 0.1) c h / 30%)`,\n  floatAmplitude = 10, // Pixels\n  floatSpeed = 30, // Divisor for frame, smaller is faster\n}: FloatingCardProps) {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  // Entry animation for scale\n  const scale = spring({\n    frame,\n    fps,\n    from: 0,\n    to: 1,\n    durationInFrames,\n    config: {\n      damping,\n      mass,\n      stiffness,\n    },\n  });\n\n  // Floating animation for position\n  const floatOffset = Math.sin(frame / floatSpeed) * floatAmplitude;\n\n  const cardStyle: React.CSSProperties = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: `translate(-50%, -50%) translateY(${floatOffset}px) scale(${scale})`,\n    width,\n    height,\n    background: backgroundColor,\n    borderRadius,\n    borderColor,\n    borderWidth,\n    borderStyle,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize,\n    fontWeight: \"bold\",\n    color: textColor,\n    padding: \"10px\", // Added padding similar to CardFlip face\n    boxSizing: \"border-box\", // Added for consistent padding behavior\n    boxShadow,\n    overflow: \"hidden\", // Ensures border radius is respected with box shadow\n  };\n\n  return <div style={cardStyle}>{text}</div>;\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}