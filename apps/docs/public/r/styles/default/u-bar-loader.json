{
  "name": "u-bar-loader",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/bar-loader/page.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Player } from \"@remotion/player\";\r\n\r\nimport BarLoader from \"@/registry/default/components/bar-loader\"; // Adjust path as necessary\r\n\r\n// Define props for the new composition component\r\ninterface BarLoaderCompositionProps {\r\n  barLoaderProps: React.ComponentProps<typeof BarLoader>;\r\n}\r\n\r\n// New component combining BarLoader\r\nconst BarLoaderComposition: React.FC<BarLoaderCompositionProps> = ({\r\n  barLoaderProps,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <BarLoader {...barLoaderProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function BarLoaderDemo() {\r\n  const barLoaderProps = React.useMemo(\r\n    () => ({\r\n      loadingText: \"Loading...\",\r\n      barColor: \"var(--primary)\", // Green bar\r\n      textColor: \"var(--primary)\",\r\n      width: \"30%\",\r\n      height: \"20%\",\r\n      hideText: false, // Uncomment to hide the loading text\r\n      barBorderRadius: 4, // Example: 4px border radius for the bar\r\n      trackColor: \"var(--muted)\", // Example: Darker track color\r\n      barHeight: \"10px\", // Example: 20px bar height\r\n    }),\r\n    []\r\n  );\r\n\r\n  const playerDurationInFrames = 150; // 5 seconds at 30fps\r\n\r\n  return (\r\n    <div className=\"aspect-video h-[180px] sm:h-[350px] md:h-[400px]\">\r\n      <Player\r\n        component={BarLoaderComposition}\r\n        inputProps={{ barLoaderProps }}\r\n        durationInFrames={playerDurationInFrames}\r\n        compositionWidth={640}\r\n        compositionHeight={360}\r\n        fps={30}\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        controls\r\n        loop\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/bar-loader.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { useCurrentFrame, useVideoConfig } from \"remotion\";\r\n\r\ninterface BarLoaderProps {\r\n  loadingText?: string;\r\n  barColor?: string;\r\n  textColor?: string;\r\n  height?: string | number;\r\n  width?: string | number;\r\n  containerStyle?: React.CSSProperties;\r\n  hideText?: boolean;\r\n  barBorderRadius?: string | number;\r\n  trackColor?: string;\r\n  barHeight?: string | number;\r\n}\r\n\r\nexport default function BarLoader({\r\n  loadingText = \"Loading...\",\r\n  barColor = \"var(--foreground)\",\r\n  textColor = \"var(--foreground)\",\r\n  height: propHeight,\r\n  width: propWidth,\r\n  containerStyle,\r\n  hideText = false,\r\n  barBorderRadius,\r\n  trackColor = \"var(--muted)\",\r\n  barHeight: propBarHeight,\r\n}: BarLoaderProps) {\r\n  const frame = useCurrentFrame();\r\n  const {\r\n    durationInFrames,\r\n    width: videoWidth,\r\n    height: videoHeight,\r\n  } = useVideoConfig();\r\n\r\n  let computedWidth: number;\r\n  if (typeof propWidth === \"number\") {\r\n    computedWidth = propWidth;\r\n  } else if (typeof propWidth === \"string\" && propWidth.endsWith(\"%\")) {\r\n    const percentage = parseFloat(propWidth.substring(0, propWidth.length - 1));\r\n    computedWidth = !isNaN(percentage)\r\n      ? (percentage / 100) * videoWidth\r\n      : videoWidth;\r\n  } else {\r\n    computedWidth = videoWidth;\r\n  }\r\n\r\n  let computedHeight: number;\r\n  if (typeof propHeight === \"number\") {\r\n    computedHeight = propHeight;\r\n  } else if (typeof propHeight === \"string\" && propHeight.endsWith(\"%\")) {\r\n    const percentage = parseFloat(\r\n      propHeight.substring(0, propHeight.length - 1)\r\n    );\r\n    computedHeight = !isNaN(percentage)\r\n      ? (percentage / 100) * videoHeight\r\n      : videoHeight / 4; // Default to 1/4th of video height if not specified\r\n  } else {\r\n    computedHeight = videoHeight / 4; // Default to 1/4th of video height\r\n  }\r\n\r\n  const finalWidth = computedWidth;\r\n  const finalHeight = computedHeight;\r\n  const calculatedBarHeight = Math.max(8, finalHeight / 4); // Ensure bar is at least 8px or 1/4 of component height\r\n\r\n  let actualBarHeight: number;\r\n  if (typeof propBarHeight === \"number\") {\r\n    actualBarHeight = propBarHeight;\r\n  } else if (typeof propBarHeight === \"string\") {\r\n    if (propBarHeight.endsWith(\"%\")) {\r\n      const percentage = parseFloat(\r\n        propBarHeight.substring(0, propBarHeight.length - 1)\r\n      );\r\n      actualBarHeight = !isNaN(percentage)\r\n        ? (percentage / 100) * finalHeight\r\n        : calculatedBarHeight;\r\n    } else if (propBarHeight.endsWith(\"px\")) {\r\n      const pxValue = parseFloat(\r\n        propBarHeight.substring(0, propBarHeight.length - 2)\r\n      );\r\n      actualBarHeight = !isNaN(pxValue) ? pxValue : calculatedBarHeight;\r\n    } else {\r\n      // Assuming it's a number as a string, or fallback\r\n      const numValue = parseFloat(propBarHeight);\r\n      actualBarHeight = !isNaN(numValue) ? numValue : calculatedBarHeight;\r\n    }\r\n  } else {\r\n    actualBarHeight = calculatedBarHeight;\r\n  }\r\n\r\n  const textHeight = finalHeight - actualBarHeight;\r\n  const actualBarBorderRadius =\r\n    barBorderRadius !== undefined ? barBorderRadius : actualBarHeight / 2;\r\n\r\n  const progress = frame / durationInFrames;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: finalWidth,\r\n        height: finalHeight,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: \"transparent\",\r\n        textAlign: \"center\",\r\n        ...containerStyle,\r\n      }}\r\n    >\r\n      {!hideText && (\r\n        <div\r\n          style={{\r\n            height: textHeight,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            color: textColor,\r\n            fontSize: Math.max(16, textHeight / 2.5), // Responsive font size, adjusted for better fit\r\n            fontWeight: \"bold\",\r\n            lineHeight: 1.2, // Ensure text is vertically centered if it wraps\r\n            paddingBottom: actualBarHeight / 4, // Add some space between text and bar\r\n          }}\r\n        >\r\n          {loadingText}\r\n        </div>\r\n      )}\r\n      <div\r\n        style={{\r\n          width: \"80%\", // Bar container width\r\n          height: actualBarHeight,\r\n          backgroundColor: trackColor, // Background of the bar track\r\n          borderRadius: actualBarBorderRadius,\r\n          overflow: \"hidden\",\r\n          marginTop: hideText ? 0 : actualBarHeight / 4, // Adjust top margin if text is hidden\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            width: `${progress * 100}%`,\r\n            height: \"100%\",\r\n            backgroundColor: barColor,\r\n            borderRadius: actualBarBorderRadius,\r\n            transition: \"width 0.1s linear\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}