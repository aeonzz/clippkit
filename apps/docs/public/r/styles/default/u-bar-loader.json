{
  "name": "u-bar-loader",
  "type": "registry:block",
  "description": "",
  "files": [
    {
      "path": "blocks/bar-loader/page.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Player } from \"@remotion/player\";\r\n\r\nimport BarLoader from \"@/registry/default/components/bar-loader\"; // Adjust path as necessary\r\n\r\n// Define props for the new composition component\r\ninterface BarLoaderCompositionProps {\r\n  barLoaderProps: React.ComponentProps<typeof BarLoader>;\r\n}\r\n\r\n// New component combining BarLoader\r\nconst BarLoaderComposition: React.FC<BarLoaderCompositionProps> = ({\r\n  barLoaderProps,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <BarLoader {...barLoaderProps} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function BarLoaderDemo() {\r\n  const barLoaderProps = React.useMemo(\r\n    () => ({\r\n      loadingText: \"Loading...\",\r\n      barColor: \"var(--primary)\", // Green bar\r\n      textColor: \"var(--primary)\",\r\n      width: \"30%\",\r\n      height: \"20%\",\r\n      hideText: false, // Uncomment to hide the loading text\r\n      barBorderRadius: 4, // Example: 4px border radius for the bar\r\n      trackColor: \"var(--muted)\", // Example: Darker track color\r\n      barHeight: \"10px\", // Example: 20px bar height\r\n    }),\r\n    []\r\n  );\r\n\r\n  const playerDurationInFrames = 150; // 5 seconds at 30fps\r\n\r\n  return (\r\n    <Player\r\n      component={BarLoaderComposition}\r\n      inputProps={{ barLoaderProps }}\r\n      durationInFrames={playerDurationInFrames}\r\n      compositionWidth={640}\r\n      compositionHeight={360}\r\n      fps={30}\r\n      style={{\r\n        backgroundColor: \"transparent\",\r\n      }}\r\n      controls\r\n      loop\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "components/bar-loader.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface BarLoaderProps {\n  loadingText?: string;\n  barColor?: string;\n  textColor?: string;\n  height?: string | number;\n  width?: string | number;\n  containerStyle?: React.CSSProperties;\n  hideText?: boolean;\n  barBorderRadius?: string | number;\n  trackColor?: string;\n  barHeight?: string | number;\n}\n\nexport default function BarLoader({\n  loadingText = \"Loading...\",\n  barColor = \"var(--foreground)\",\n  textColor = \"var(--foreground)\",\n  height: propHeight,\n  width: propWidth,\n  containerStyle,\n  hideText = false,\n  barBorderRadius,\n  trackColor = \"var(--muted)\",\n  barHeight: propBarHeight,\n}: BarLoaderProps) {\n  const frame = useCurrentFrame();\n  const {\n    durationInFrames,\n    width: videoWidth,\n    height: videoHeight,\n  } = useVideoConfig();\n\n  let computedWidth: number;\n  if (typeof propWidth === \"number\") {\n    computedWidth = propWidth;\n  } else if (typeof propWidth === \"string\" && propWidth.endsWith(\"%\")) {\n    const percentage = parseFloat(propWidth.substring(0, propWidth.length - 1));\n    computedWidth = !isNaN(percentage)\n      ? (percentage / 100) * videoWidth\n      : videoWidth;\n  } else {\n    computedWidth = videoWidth;\n  }\n\n  let computedHeight: number;\n  if (typeof propHeight === \"number\") {\n    computedHeight = propHeight;\n  } else if (typeof propHeight === \"string\" && propHeight.endsWith(\"%\")) {\n    const percentage = parseFloat(\n      propHeight.substring(0, propHeight.length - 1)\n    );\n    computedHeight = !isNaN(percentage)\n      ? (percentage / 100) * videoHeight\n      : videoHeight / 4; // Default to 1/4th of video height if not specified\n  } else {\n    computedHeight = videoHeight / 4; // Default to 1/4th of video height\n  }\n\n  const finalWidth = computedWidth;\n  const finalHeight = computedHeight;\n  const calculatedBarHeight = Math.max(8, finalHeight / 4); // Ensure bar is at least 8px or 1/4 of component height\n\n  let actualBarHeight: number;\n  if (typeof propBarHeight === \"number\") {\n    actualBarHeight = propBarHeight;\n  } else if (typeof propBarHeight === \"string\") {\n    if (propBarHeight.endsWith(\"%\")) {\n      const percentage = parseFloat(\n        propBarHeight.substring(0, propBarHeight.length - 1)\n      );\n      actualBarHeight = !isNaN(percentage)\n        ? (percentage / 100) * finalHeight\n        : calculatedBarHeight;\n    } else if (propBarHeight.endsWith(\"px\")) {\n      const pxValue = parseFloat(\n        propBarHeight.substring(0, propBarHeight.length - 2)\n      );\n      actualBarHeight = !isNaN(pxValue) ? pxValue : calculatedBarHeight;\n    } else {\n      // Assuming it's a number as a string, or fallback\n      const numValue = parseFloat(propBarHeight);\n      actualBarHeight = !isNaN(numValue) ? numValue : calculatedBarHeight;\n    }\n  } else {\n    actualBarHeight = calculatedBarHeight;\n  }\n\n  const textHeight = finalHeight - actualBarHeight;\n  const actualBarBorderRadius =\n    barBorderRadius !== undefined ? barBorderRadius : actualBarHeight / 2;\n\n  const progress = frame / durationInFrames;\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        textAlign: \"center\",\n        ...containerStyle,\n      }}\n    >\n      {!hideText && (\n        <div\n          style={{\n            height: textHeight,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            color: textColor,\n            fontSize: Math.max(16, textHeight / 2.5), // Responsive font size, adjusted for better fit\n            fontWeight: \"bold\",\n            lineHeight: 1.2, // Ensure text is vertically centered if it wraps\n            paddingBottom: actualBarHeight / 4, // Add some space between text and bar\n          }}\n        >\n          {loadingText}\n        </div>\n      )}\n      <div\n        style={{\n          width: \"80%\", // Bar container width\n          height: actualBarHeight,\n          backgroundColor: trackColor, // Background of the bar track\n          borderRadius: actualBarBorderRadius,\n          overflow: \"hidden\",\n          marginTop: hideText ? 0 : actualBarHeight / 4, // Adjust top margin if text is hidden\n        }}\n      >\n        <div\n          style={{\n            width: `${progress * 100}%`,\n            height: \"100%\",\n            backgroundColor: barColor,\n            borderRadius: actualBarBorderRadius,\n            transition: \"width 0.1s linear\",\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "600px",
    "container": "w-full bg-surface min-h-svh flex px-6 py-12 items-center md:pt-20 justify-center min-w-0 xl:py-24",
    "mobile": "component"
  }
}