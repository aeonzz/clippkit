{
  "name": "linear-waveform",
  "type": "registry:component",
  "dependencies": [
    "remotion",
    "@remotion/media-utils"
  ],
  "files": [
    {
      "path": "components/linear-waveform.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  createSmoothSvgPath,\r\n  MediaUtilsAudioData,\r\n  visualizeAudioWaveform,\r\n} from \"@remotion/media-utils\";\r\nimport { useCurrentFrame, useVideoConfig } from \"remotion\";\r\n\r\n// Helper function to generate waveform samples\r\nconst generateWaveformSamples = (\r\n  audioData: MediaUtilsAudioData | null | undefined,\r\n  numberOfSamples: number,\r\n  frame: number,\r\n  waveSpeed: number,\r\n  fps: number\r\n): number[] => {\r\n  if (audioData) {\r\n    return visualizeAudioWaveform({\r\n      fps,\r\n      frame,\r\n      audioData,\r\n      numberOfSamples,\r\n      windowInSeconds: 1 / fps, // Visualize a single frame's worth of audio\r\n    });\r\n  }\r\n  return Array(numberOfSamples)\r\n    .fill(0)\r\n    .map((_, i) => {\r\n      return (\r\n        Math.sin(frame / waveSpeed + (i / numberOfSamples) * 2 * Math.PI) *\r\n          0.5 +\r\n        0.5\r\n      );\r\n    });\r\n};\r\n\r\n// Helper function to calculate SVG path from samples\r\nconst calculateSvgPath = (\r\n  samples: number[],\r\n  finalWidth: number,\r\n  finalHeight: number,\r\n  waveAmplitude: number,\r\n  strokeWidth: number,\r\n  numberOfSamples: number\r\n): string => {\r\n  const points = samples.map((sample, i) => {\r\n    const x = (i / Math.max(1, numberOfSamples - 1)) * finalWidth;\r\n    let y = Math.round((sample - 0.5) * waveAmplitude + finalHeight / 2);\r\n    y = Math.max(strokeWidth / 2, Math.min(finalHeight - strokeWidth / 2, y));\r\n    return { x, y };\r\n  });\r\n\r\n  if (points.length > 1) {\r\n    return createSmoothSvgPath({ points }) as string;\r\n  }\r\n  if (points.length === 1) {\r\n    return `M 0 ${points[0].y} L ${finalWidth} ${points[0].y}`;\r\n  }\r\n  return \"\";\r\n};\r\n\r\ninterface LinearWaveformProps {\r\n  audioData?: MediaUtilsAudioData | null;\r\n  numberOfSamples?: number;\r\n  strokeColor?: string;\r\n  strokeWidth?: number;\r\n  fillColor?: string;\r\n  waveAmplitude?: number;\r\n  waveSpeed?: number;\r\n  containerStyle?: React.CSSProperties;\r\n  height?: string | number;\r\n  width?: string | number;\r\n}\r\n\r\nexport default function LinearWaveform({\r\n  audioData,\r\n  numberOfSamples = 64,\r\n  strokeColor = \"var(--foreground)\",\r\n  strokeWidth = 2,\r\n  fillColor = \"none\",\r\n  waveAmplitude = 100,\r\n  waveSpeed = 10,\r\n  containerStyle,\r\n  height: propHeight,\r\n  width: propWidth,\r\n}: LinearWaveformProps) {\r\n  const frame = useCurrentFrame();\r\n  const { width: videoWidth, height: videoHeight, fps } = useVideoConfig();\r\n\r\n  let computedWidth: number;\r\n  if (typeof propWidth === \"number\") {\r\n    computedWidth = propWidth;\r\n  } else if (typeof propWidth === \"string\" && propWidth.endsWith(\"%\")) {\r\n    const percentage = parseFloat(propWidth.substring(0, propWidth.length - 1));\r\n    computedWidth = !isNaN(percentage)\r\n      ? (percentage / 100) * videoWidth\r\n      : videoWidth;\r\n  } else {\r\n    computedWidth = videoWidth;\r\n  }\r\n\r\n  let computedHeight: number;\r\n  if (typeof propHeight === \"number\") {\r\n    computedHeight = propHeight;\r\n  } else if (typeof propHeight === \"string\" && propHeight.endsWith(\"%\")) {\r\n    const percentage = parseFloat(\r\n      propHeight.substring(0, propHeight.length - 1)\r\n    );\r\n    computedHeight = !isNaN(percentage)\r\n      ? (percentage / 100) * videoHeight\r\n      : videoHeight;\r\n  } else {\r\n    computedHeight = videoHeight;\r\n  }\r\n\r\n  const finalWidth = computedWidth;\r\n  const finalHeight = computedHeight;\r\n\r\n  const [svgPath, setSvgPath] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const waveformData = generateWaveformSamples(\r\n      audioData,\r\n      numberOfSamples,\r\n      frame,\r\n      waveSpeed,\r\n      fps\r\n    );\r\n\r\n    const newPath = calculateSvgPath(\r\n      waveformData,\r\n      finalWidth,\r\n      finalHeight,\r\n      waveAmplitude,\r\n      strokeWidth,\r\n      numberOfSamples\r\n    );\r\n\r\n    setSvgPath(newPath);\r\n  }, [\r\n    frame,\r\n    audioData,\r\n    numberOfSamples,\r\n    waveAmplitude,\r\n    waveSpeed,\r\n    finalWidth,\r\n    finalHeight,\r\n    fps,\r\n    strokeWidth,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: finalWidth,\r\n        height: finalHeight,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: \"transparent\",\r\n        ...containerStyle,\r\n      }}\r\n    >\r\n      <svg\r\n        viewBox={`0 0 ${finalWidth} ${finalHeight}`}\r\n        width={finalWidth}\r\n        height={finalHeight}\r\n        style={{\r\n          width: finalWidth,\r\n          height: finalHeight,\r\n        }}\r\n      >\r\n        <path\r\n          d={svgPath}\r\n          stroke={strokeColor}\r\n          strokeWidth={strokeWidth}\r\n          fill={fillColor}\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}