{
  "name": "linear-waveform",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/linear-waveform.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { random, useCurrentFrame, useVideoConfig } from \"remotion\";\n\ninterface LinearWaveformProps {\n  barCount?: number;\n  barWidth?: number;\n  barGap?: number;\n  barColor?: string;\n  barBorderRadius?: string;\n  waveAmplitude?: number;\n  waveSpeed?: number;\n  randomness?: number;\n  containerStyle?: React.CSSProperties;\n  barStyle?: React.CSSProperties;\n  barShadow?: string;\n  height?: string | number;\n  width?: string | number;\n}\n\nexport default function LinearWaveform({\n  barCount = 40,\n  barWidth = 12,\n  barGap = 4,\n  barColor = \"var(--foreground)\",\n  barBorderRadius = \"2px\",\n  waveAmplitude = 100,\n  waveSpeed = 10,\n  randomness = 50,\n  containerStyle,\n  barStyle,\n  barShadow = \"none\",\n  height: propHeight,\n  width: propWidth,\n}: LinearWaveformProps) {\n  const frame = useCurrentFrame();\n  const { width: videoWidth, height: videoHeight } = useVideoConfig();\n\n  const bars = Array.from({ length: barCount }).map((_, i) => {\n    const seed = i * 1000; // Keep seed somewhat unique per bar for consistent randomness\n    const dynamicHeight =\n      Math.abs(Math.sin(frame / waveSpeed + i / (barCount / Math.PI))) *\n        waveAmplitude +\n      random(seed) * randomness;\n\n    return {\n      height: Math.max(5, dynamicHeight), // Ensure a minimum height for visibility\n      // Hue can be dynamic or fixed based on props if needed later\n      // hue: (i / barCount) * 180 + frame,\n    };\n  });\n\n  const finalWidth = propWidth ?? videoWidth;\n  const finalHeight = propHeight ?? videoHeight;\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: `${barGap}px`,\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        ...containerStyle,\n      }}\n    >\n      {bars.map((bar, i) => (\n        <div\n          key={i}\n          style={{\n            width: `${barWidth}px`,\n            height: `${bar.height}px`,\n            backgroundColor: barColor,\n            borderRadius: barBorderRadius,\n            transition: \"height 0.05s ease-out\", // Smoother transition\n            boxShadow: barShadow,\n            ...barStyle,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}