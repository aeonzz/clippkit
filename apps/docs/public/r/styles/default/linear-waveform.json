{
  "name": "linear-waveform",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/linear-waveform.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  createSmoothSvgPath,\n  MediaUtilsAudioData,\n  visualizeAudioWaveform,\n} from \"@remotion/media-utils\";\nimport { useCurrentFrame, useVideoConfig } from \"remotion\";\n\n// Helper function to generate waveform samples\nconst generateWaveformSamples = (\n  audioData: MediaUtilsAudioData | null | undefined,\n  numberOfSamples: number,\n  frame: number,\n  waveSpeed: number,\n  fps: number\n): number[] => {\n  if (audioData) {\n    return visualizeAudioWaveform({\n      fps,\n      frame,\n      audioData,\n      numberOfSamples,\n      windowInSeconds: 1 / fps, // Visualize a single frame's worth of audio\n    });\n  }\n  return Array(numberOfSamples)\n    .fill(0)\n    .map((_, i) => {\n      return (\n        Math.sin(frame / waveSpeed + (i / numberOfSamples) * 2 * Math.PI) *\n          0.5 +\n        0.5\n      );\n    });\n};\n\n// Helper function to calculate SVG path from samples\nconst calculateSvgPath = (\n  samples: number[],\n  finalWidth: number,\n  finalHeight: number,\n  waveAmplitude: number,\n  strokeWidth: number,\n  numberOfSamples: number\n): string => {\n  const points = samples.map((sample, i) => {\n    const x = (i / Math.max(1, numberOfSamples - 1)) * finalWidth;\n    let y = Math.round((sample - 0.5) * waveAmplitude + finalHeight / 2);\n    y = Math.max(strokeWidth / 2, Math.min(finalHeight - strokeWidth / 2, y));\n    return { x, y };\n  });\n\n  if (points.length > 1) {\n    return createSmoothSvgPath({ points }) as string;\n  }\n  if (points.length === 1) {\n    return `M 0 ${points[0].y} L ${finalWidth} ${points[0].y}`;\n  }\n  return \"\";\n};\n\ninterface LinearWaveformProps {\n  audioData?: MediaUtilsAudioData | null;\n  numberOfSamples?: number;\n  strokeColor?: string;\n  strokeWidth?: number;\n  fillColor?: string;\n  waveAmplitude?: number;\n  waveSpeed?: number;\n  containerStyle?: React.CSSProperties;\n  height?: string | number;\n  width?: string | number;\n}\n\nexport default function LinearWaveform({\n  audioData,\n  numberOfSamples = 64,\n  strokeColor = \"var(--foreground)\",\n  strokeWidth = 2,\n  fillColor = \"none\",\n  waveAmplitude = 100,\n  waveSpeed = 10,\n  containerStyle,\n  height: propHeight,\n  width: propWidth,\n}: LinearWaveformProps) {\n  const frame = useCurrentFrame();\n  const { width: videoWidth, height: videoHeight, fps } = useVideoConfig();\n\n  const finalWidth = typeof propWidth === \"number\" ? propWidth : videoWidth;\n  const finalHeight = typeof propHeight === \"number\" ? propHeight : videoHeight;\n\n  const [svgPath, setSvgPath] = useState(\"\");\n\n  useEffect(() => {\n    const waveformData = generateWaveformSamples(\n      audioData,\n      numberOfSamples,\n      frame,\n      waveSpeed,\n      fps\n    );\n\n    const newPath = calculateSvgPath(\n      waveformData,\n      finalWidth,\n      finalHeight,\n      waveAmplitude,\n      strokeWidth,\n      numberOfSamples\n    );\n\n    setSvgPath(newPath);\n  }, [\n    frame,\n    audioData,\n    numberOfSamples,\n    waveAmplitude,\n    waveSpeed,\n    finalWidth,\n    finalHeight,\n    fps,\n    strokeWidth,\n  ]);\n\n  return (\n    <div\n      style={{\n        width: finalWidth,\n        height: finalHeight,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n        backgroundColor: \"transparent\",\n        ...containerStyle,\n      }}\n    >\n      <svg\n        viewBox={`0 0 ${finalWidth} ${finalHeight}`}\n        width={finalWidth}\n        height={finalHeight}\n        style={{\n          width: finalWidth,\n          height: finalHeight,\n        }}\n      >\n        <path\n          d={svgPath}\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          fill={fillColor}\n        />\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}