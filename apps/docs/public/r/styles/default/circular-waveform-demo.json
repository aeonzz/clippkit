{
  "name": "circular-waveform-demo",
  "type": "registry:example",
  "files": [
    {
      "path": "examples/circular-waveform-demo.tsx",
      "content": "import React from \"react\"; // Import React\nimport { MediaUtilsAudioData, useAudioData } from \"@remotion/media-utils\";\nimport { Player } from \"@remotion/player\";\nimport { Audio } from \"remotion\"; // Import Audio\n\nimport CircularWaveform from \"../ui/circular-waveform\";\n\n// Media source for the demo\nconst MEDIA_SRC =\n  \"https://rwxrdxvxndclnqvznxfj.supabase.co/storage/v1/object/public/sounds//moon-landing.mp3\";\n\n// Define props for the new composition component\ninterface AudioCircularWaveformCompositionProps {\n  circularWaveformProps: Omit<\n    React.ComponentProps<typeof CircularWaveform>,\n    \"audioData\"\n  > & { audioData?: MediaUtilsAudioData | null };\n  mediaSrc: string;\n}\n\n// New component combining CircularWaveform and Audio\nconst AudioCircularWaveformComposition: React.FC<\n  AudioCircularWaveformCompositionProps\n> = ({ circularWaveformProps, mediaSrc }) => {\n  return (\n    <>\n      <CircularWaveform {...circularWaveformProps} />\n      <Audio src={mediaSrc} />\n    </>\n  );\n};\n\nexport default function CircularWaveformDemo() {\n  const audioData = useAudioData(MEDIA_SRC);\n\n  const circularWaveformProps = React.useMemo(\n    () => ({\n      barCount: 180,\n      barWidth: 2,\n      waveAmplitude: 100,\n      radius: 100,\n      audioData,\n      strokeLinecap: \"round\" as const,\n      barMinHeight: 2,\n      transitionDuration: \"0.1s\",\n      transitionTimingFunction: \"ease-in-out\",\n      rotationOffset: 45,\n      barColor: \"var(--foreground)\",\n    }),\n    [audioData]\n  );\n\n  // Calculate duration in frames for the player for better readability\n  const playerDurationInFrames = audioData\n    ? Math.floor(audioData.durationInSeconds * 30)\n    : 300;\n\n  return (\n    <Player\n      component={AudioCircularWaveformComposition} // Use the new component\n      inputProps={{ circularWaveformProps, mediaSrc: MEDIA_SRC }} // Pass props directly\n      durationInFrames={playerDurationInFrames} // e.g., 10 seconds at 30fps\n      compositionWidth={640}\n      compositionHeight={360} // 16:9 aspect ratio\n      fps={30}\n      style={{\n        width: \"100%\",\n        height: \"100%\", // Player will scale to fit its container\n        backgroundColor: \"transparent\",\n      }}\n      controls // Show player controls\n      loop\n    />\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}